import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // üß† X√°c th·ª±c qua Bearer token
    const authHeader = req.headers.get("authorization") || "";
    const token = authHeader.replace("Bearer ", "");
    
    if (!token) {
      return new Response(
        JSON.stringify({ error: "Missing access token" }), 
        { 
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    // K·∫øt n·ªëi Supabase b·∫±ng service role key
    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    const serviceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    
    if (!supabaseUrl || !serviceKey) {
      return new Response(
        JSON.stringify({ error: "Server configuration error" }), 
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    const supabase = createClient(supabaseUrl, serviceKey);

    // üîê X√°c th·ª±c token c·ªßa user
    const { data: userData, error: userError } = await supabase.auth.getUser(token);
    if (userError || !userData?.user) {
      return new Response(
        JSON.stringify({ error: "Invalid token" }), 
        { 
          status: 401,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }
    const user = userData.user;

    // üöÄ Th·ª±c hi·ªán t·∫•t c·∫£ queries song song ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng
    const [
      totalCountResult,
      statusData,
      positionData,
      recentCandidatesResult
    ] = await Promise.all([
      // 1Ô∏è‚É£ T·ªïng s·ªë ·ª©ng vi√™n
      supabase
        .from("candidates")
        .select("*", { count: "exact", head: true })
        .eq("user_id", user.id),

      // 2Ô∏è‚É£ D·ªØ li·ªáu tr·∫°ng th√°i v√† v·ªã tr√≠ (m·ªôt query duy nh·∫•t)
      supabase
        .from("candidates")
        .select("status, applied_position")
        .eq("user_id", user.id),

      // 3Ô∏è‚É£ D·ªØ li·ªáu v·ªã tr√≠ ri√™ng ƒë·ªÉ t√≠nh top positions
      supabase
        .from("candidates")
        .select("applied_position")
        .eq("user_id", user.id)
        .not("applied_position", "is", null),

      // 4Ô∏è‚É£ ·ª®ng vi√™n m·ªõi trong 7 ng√†y
      supabase
        .from("candidates")
        .select("*")
        .eq("user_id", user.id)
        .gte("created_at", new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
        .order("created_at", { ascending: false })
        .limit(50) // Gi·ªõi h·∫°n ƒë·ªÉ tr√°nh d·ªØ li·ªáu qu√° l·ªõn
    ]);

    // üõë X·ª≠ l√Ω l·ªói t·ª´ c√°c queries
    if (totalCountResult.error) throw totalCountResult.error;
    if (statusData.error) throw statusData.error;
    if (positionData.error) throw positionData.error;
    if (recentCandidatesResult.error) throw recentCandidatesResult.error;

    const totalCount = totalCountResult.count || 0;

    // ========== 2Ô∏è‚É£ T·ª∑ l·ªá t·ª´ng tr·∫°ng th√°i ==========
    const statusCount: Record<string, number> = {};
    statusData.data?.forEach((c) => {
      const status = c.status || 'Unknown';
      statusCount[status] = (statusCount[status] || 0) + 1;
    });

    const statusRatio = Object.entries(statusCount).map(([status, count]) => ({
      status,
      count,
      ratio: totalCount ? Number(((count / totalCount) * 100).toFixed(1)) : 0,
    }));

    // ========== 3Ô∏è‚É£ Top 3 v·ªã tr√≠ c√≥ nhi·ªÅu ·ª©ng vi√™n nh·∫•t ==========
    const positionCount: Record<string, number> = {};
    positionData.data?.forEach((c) => {
      if (c.applied_position) {
        positionCount[c.applied_position] = (positionCount[c.applied_position] || 0) + 1;
      }
    });

    const topPositions = Object.entries(positionCount)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([position, count]) => ({ 
        position, 
        count,
        ratio: totalCount ? Number(((count / totalCount) * 100).toFixed(1)) : 0 
      }));

    // ========== 4Ô∏è‚É£ Th·ªëng k√™ theo tu·∫ßn ==========
    const weeklyStats = calculateWeeklyStats(statusData.data || []);

    // ‚úÖ Tr·∫£ v·ªÅ k·∫øt qu·∫£
    const result = {
      totalCount,
      statusRatio,
      topPositions,
      recentCandidates: recentCandidatesResult.data || [],
      weeklyStats,
      summary: {
        newThisWeek: recentCandidatesResult.data?.length || 0,
        topPosition: topPositions[0]?.position || 'N/A',
        dominantStatus: statusRatio.length > 0 
          ? statusRatio.reduce((prev, current) => 
              (prev.count > current.count) ? prev : current
            ).status 
          : 'N/A'
      }
    };

    return new Response(
      JSON.stringify(result), 
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );
  } catch (err: any) {
    console.error("Analytics error:", err);
    
    return new Response(
      JSON.stringify({ 
        error: err?.message ?? "Unknown error",
        details: err?.details || null 
      }), 
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});

// H√†m t√≠nh to√°n th·ªëng k√™ theo tu·∫ßn
function calculateWeeklyStats(candidates: any[]) {
  const weeklyData: Record<string, { total: number, statuses: Record<string, number> }> = {};
  
  candidates.forEach(candidate => {
    const week = getWeekNumber(new Date(candidate.created_at));
    const year = new Date(candidate.created_at).getFullYear();
    const weekKey = `${year}-W${week.toString().padStart(2, '0')}`;
    
    if (!weeklyData[weekKey]) {
      weeklyData[weekKey] = { total: 0, statuses: {} };
    }
    
    weeklyData[weekKey].total++;
    const status = candidate.status || 'Unknown';
    weeklyData[weekKey].statuses[status] = (weeklyData[weekKey].statuses[status] || 0) + 1;
  });
  
  return Object.entries(weeklyData)
    .sort(([a], [b]) => b.localeCompare(a))
    .slice(0, 8) // 8 tu·∫ßn g·∫ßn nh·∫•t
    .map(([week, data]) => ({
      week,
      total: data.total,
      statuses: data.statuses
    }));
}

// H√†m l·∫•y s·ªë tu·∫ßn trong nƒÉm
function getWeekNumber(date: Date): number {
  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
  const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;
  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}